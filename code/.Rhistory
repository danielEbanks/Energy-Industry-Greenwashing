Dim.1,
Dim.2)
topicLabels
TopicTable
TopicTable <- data.frame(topNwords(results[[2]],N = 5))
colnames(TopicTable) <- topicLabels$label
contribs <- res.var$contrib
contribs <- as.data.frame(contribs)%>% mutate(Label=rownames(contribs))
contribs <- contribs %>%
left_join(TopicTable) %>%
dplyr::select(TopicTitle,
Dim.1,
Dim.2)
TopicTable
topicLabels$label
contribs <- as.data.frame(contribs)%>% mutate(Label=rownames(contribs),TopicTitle=topicLabels$label)
contribs
topicLabels$label
contribs <- res.var$contrib
contribs <- as.data.frame(contribs)%>% mutate(Label=rownames(contribs),TopicTitle=topicLabels$label)
dimcontribs
dim(contribs)
contribs
clust_stats_JST <- list()
for(ff in 1:length(filter_n)){
rand_list[[ff]]        <- list()
clust_data[[ff]]       <- list()
print(ff)
#for(k in 1:length(results)){
for(k in c(2)){
# extract parameters
theta <- get_parameter(results[[k]],"theta")
phi   <- get_parameter(results[[k]],"phi")
pi    <- get_parameter(results[[k]],"pi")
#  concatenate sentiment and topic probabilities into one dataframe
theta$sent1 <- pi$sent1
theta$sent2 <- pi$sent2
if(n_senti>2){
theta$sent3 <- pi$sent3
}
cutoff<- kk[k]
theta_est<-theta
theta_est[,9:(9+cutoff)] <- theta[,9:(8+cutoff)]*theta$sent1
theta_est[,(9+cutoff):(8+2.5*cutoff)] <- theta[,(9+cutoff):(8+2.5*cutoff)]*theta$sent2
theta_est[,(9+2.5*cutoff):(8+3*cutoff)] <- theta[,(9+2.5*cutoff):(8+3*cutoff)]*theta$sent2
if(n_senti==3){
PCA_vecs_agg    <- theta%>%
group_by(org,handle)%>%
mutate(n_tweets = n()) %>%
filter(n_tweets>filter_n[ff]) %>%
ungroup() %>%dplyr::select(org,handle,topic1sent1:sent3) %>%
group_by(org,handle)%>%
summarise_all(list(mean))
}
if(n_senti==2){
PCA_vecs_agg    <- theta%>%
group_by(org,handle)%>%
mutate(n_tweets = n()) %>%
filter(n_tweets>filter_n[ff]) %>%
ungroup() %>%dplyr::select(org,handle,topic1sent1:sent2) %>%
group_by(org,handle)%>%
summarise_all(list(mean))
}
PCA_vecs_agg$n_tweets <- NULL
#compute hellinger distance
if(n_senti==3){
pca_mat <- as.matrix(PCA_vecs_agg%>%ungroup %>%dplyr::select(topic1sent1:sent3))
pca_mat <- (pca_mat[,1:(ncol(pca_mat)-n_senti)])
}
if(n_senti==2){
pca_mat <- as.matrix(PCA_vecs_agg%>%ungroup %>%
dplyr::select(topic1sent1:sent2))
pca_mat <- (pca_mat[,1:(ncol(pca_mat))])
}
fit6  <-prcomp(pca_mat)
res.var <- get_pca_var(fit6)
ind.var <- get_pca_ind(fit6)
pc1 <- ind.var$coord[,1]
pc2 <- ind.var$coord[,2]
PCA_vecs_agg$dim1 <- pc1
PCA_vecs_agg$dim2 <- pc2
#stress_list[[ff]][[k]] <-fit4$copstress
PCA_vecs_agg %>% filter(abs(dim2)<=0.3) %>% group_by(org) %>%
summarise(n(),mean(dim1),
mean(dim2),sd(dim1),sd(dim2))%>%filter('n()'>filter_n[ff])
g <- ggplot( PCA_vecs_agg %>%filter(abs(dim1)<=0.3),aes(dim1,dim2,colour=org))+
geom_point() +
scale_size_manual(values=c(2,5))+theme_bw()+scale_color_manual(values=c("#2E74C0", "#CB454A","#228B22"))+
ggtitle("Aggregate Message Positions-PCA")+
labs(colour="Organization Type")
plot(g)
pdf(file=paste0("../plots/clim_total_JST_mespos_agg_",k,".pdf"))
plot(g)
dev.off()
df.clust <- fit6$x[(fit6$x[,2])<(mean(fit6$x[,2]))+(2.5*sd(fit6$x[,2])) &
(fit6$x[,2])>(mean(fit6$x[,2]))-(2.5*sd(fit6$x[,2])) &
(fit6$x[,1])<(mean(fit6$x[,1]))+(2.5*sd(fit6$x[,1])) &
(fit6$x[,1])>(mean(fit6$x[,1]))-(2.5*sd(fit6$x[,1]))
,c(1,2)]
km.res <- eclust(df.clust , "kmeans", k = 2, nstart = 25, graph = FALSE)
org    <- as.numeric(factor(PCA_vecs_agg$org[(fit6$x[,2])<(mean(fit6$x[,2]))+(2.5*sd(fit6$x[,2])) &
(fit6$x[,2])>(mean(fit6$x[,2]))-(2.5*sd(fit6$x[,2])) &
(fit6$x[,1])<(mean(fit6$x[,1]))+(2.5*sd(fit6$x[,1])) &
(fit6$x[,1])>(mean(fit6$x[,1]))-(2.5*sd(fit6$x[,1]))]))
clust_stats_JST[[k]] <- data.frame(vi=cluster.stats(d = dist(df.clust ),
alt.clustering=org, clustering=km.res$cluster)$vi,
rand=cluster.stats(d = dist(df.clust), alt.clustering=org, clustering=km.res$cluster)$corrected.rand,
topic_n=k,model="JST")
}
}
clust_stats_JST <- data.table::rbindlist(clust_stats_JST)
clust_stats_JST$topic_n <- kk
contribs <- res.var$contrib
contribs <- as.data.frame(contribs)%>% mutate(Label=rownames(contribs),TopicTitle=topicLabels$label)
contribs <- contribs %>%
left_join(TopicTable) %>%
dplyr::select(TopicTitle,
Dim.1,
Dim.2)
contribs <- contribs %>%
dplyr::select(TopicTitle,
Dim.1,
Dim.2)
contribs
contribs_strip<-contribs %>%
arrange(-Dim.1) %>%
dplyr::select(Label,
Dim.1) %>%
rename_at(vars(TopicTitle,
Dim.1),
~c("Topic","Contribution")) %>%
na.omit()
contribs
contribs_strip<-contribs %>%
arrange(-Dim.1) %>%
rename_at(vars(TopicTitle,
Dim.1),
~c("Topic","Contribution")) %>%
na.omit()
contribs_strip
print(xtable(contribs_strip %>%filter(Dim.1>=1),
label    = "tab:TopicContribs",
caption  = "Top PCA Topic Drivers of Seperation",
align    = "cLc"),
caption.placement= "top",
include.rownames = F,
file      = "../tables/TopicContribs.tex")
print(xtable(contribs_strip %>%filter(Contribution>=1),
label    = "tab:TopicContribs",
caption  = "Top PCA Topic Drivers of Seperation",
align    = "cLc"),
caption.placement= "top",
include.rownames = F,
file      = "../tables/TopicContribs_top.tex")
contribs_strip<-contribs %>%
arrange(-Dim.1) %>%
rename_at(vars(TopicTitle,
Dim.1),
~c("Topic","Contribution")) %>%
select(Topic,Contribution) %>%
na.omit()
contribs_strip<-contribs %>%
arrange(-Dim.1) %>%
rename_at(vars(TopicTitle,
Dim.1),
~c("Topic","Contribution")) %>%
dplyr::select(Topic,Contribution) %>%
na.omit()
print(xtable(contribs_strip %>%filter(Contribution>=1),
label    = "tab:TopicContribs",
caption  = "Top PCA Topic Drivers of Seperation",
align    = "cLc"),
caption.placement= "top",
include.rownames = F,
file      = "../tables/TopicContribs_top.tex")
print(xtable(contribs_strip,
label    = "tab:TopicContribs_all",
caption  = "PCA Topic Contributions",
align    = "cLc"),
tabular.environment = "longtable",
caption.placement = "top",
floating = FALSE,
include.rownames = FALSE, # because addtorow will substitute the default row names
add.to.row = addtorow,     # this is where you actually make the substitution
hline.after=c(-1),
file      = "../tables/TopicContribs_all.tex")
pdf("../plots/SM_Ind_extremeweather.pdf")
ggplot(Org_vec_wide,aes(x=Date,y=topic6sent1_Ind*100))+
ylab("Fossil Fuel Firms' Propensity to\n Discuss Extreme Weather (%)")+
xlab("")+
ylim(c(0,20))+
geom_line()+theme_classic()
dev.off()
pdf("../plots/SM_NGO_divest.pdf")
ggplot(Org_vec_wide,aes(x=Date,y=topic8sent1_NGO*100))+
ylab("NGOs Propensity to\n Discuss Divestment (%)")+
xlab("")+
ylim(c(0,20))+
geom_line()+theme_classic()
dev.off()
pdf("../plots/SM_IGO_divest.pdf")
ggplot(Org_vec_wide,aes(x=Date,y=topic8sent1_IGO*100))+
ylab("IGOs Propensity to\n Discuss Divestment (%)")+
xlab("")+
ylim(c(0,20))+
geom_line()+theme_classic()
dev.off()
pdf("../plots/SM_IGO_jobs.pdf")
ggplot(Org_vec_wide,aes(x=Date,y=topic5sent2_IGO*100))+
ylab("IGOs Propensity to\n Renewable Jobs (%)")+
xlab("")+
ylim(c(0,20))+
geom_line()+theme_classic()
dev.off()
topic5sent2
summary(Org_vec_wide)
pdf("../plots/SM_Returns.pdf")
ggplot(Org_vec_wide,aes(x=Date,y=returns*100))+
ylab("Average Daily Stock Returns (%)")+
xlab("")+
ylim(c(-20,20))+
geom_line()+theme_classic()
dev.off()
ret_summary <- Org_vec_wide%>%dplyr::select(returns) %>%summarise_each(funs(Mean = mean,
St.dev = sd,
Min = min,
Q25 = quantile(., 0.25),
Median = median,
Q75 = quantile(., 0.75),
Max = max))
stargazer(ret_summary*100,
summary  = F,
digits = 2,
rownames = F,
label    = "tab:ReturnSummary",
title    = "Stock Market Returns Data",
out      = "../tables/returns.tex")
addtorow          <- list()
addtorow$pos      <- list()
addtorow$pos[[1]] <- c(0)
addtorow$command  <- c(paste(
"\\hline \n",
"\\endhead \n",
"\\hline \n",
"{\\footnotesize Continued on next page} \n",
"\\endfoot \n",
"\\endlastfoot \n",
sep=""))
captions_tabs <- c("Daily Propensity: Industry",
"Daily Propensity: NGOs",
"Daily Propensity: IGOs")
table_data_list <- list(Ind_vec,
NGO_vec,
IGO_vec)
file_tabs <-c("tab_DailyAttIND",
"tab_DailyAttNGO",
"tab_DailyAttIGO")
labels_tabs <-c("tab:DailyAttIND",
"tab:DailyAttNGO",
"tab:DailyAttIGO")
for(tt in 1:length(table_data_list)){
print(xtable(table_data_list[[tt]]%>%ungroup()%>%
dplyr::select(starts_with("topic")) %>%
rename_at(vars(topicLabels$name),~topicLabels$label)%>%
summarise_each(funs(Mean = mean,
St.dev = sd,
Min = min,
Q25 = quantile(., 0.25),
Median = median,
Q75 = quantile(., 0.75),
Max = max
)) %>%
gather(stat, val) %>%
separate(stat, into = c("Topic", "Statistic"), sep = "_") %>%
spread(Statistic, val) %>%
mutate(Topic,
Mean=100*Mean,
St.dev=100*St.dev,
Min=Min*100,
Q25=Q25*100,
Median=Median*100,
Q75=Q75*100,
Max=Max*100),
caption = captions_tabs[tt],
label   = labels_tabs[tt],
align="lL|ccccccc"),
tabular.environment = "longtable",
caption.placement = "top",
floating = FALSE,
include.rownames = FALSE, # because addtorow will substitute the default row names
add.to.row = addtorow,     # this is where you actually make the substitution
hline.after=c(-1),
file=paste0("../tables/table_",file_tabs[tt],".tex")
)
}
## Coherence
pdf("../plots/SM-coherence.pdf")
g <- ggplot(data=t(result_co),aes(x=kk,y=mean_npmi_cosim))+
geom_line()+xlab("Number of Topics") +
ylab("Mean NPMI Cosine Similarity") +
geom_vline(xintercept = 10,color="red")+
theme_classic()
plot(g)
dev.off()
plot_freq <- theta %>% group_by(Date) %>%summarise(Frequency=n())
theta
theta$Date <- as.POSIXct(
substr(theta$created_at,1,10),format="%Y-%m-%d")
plot_freq <- theta  %>% group_by(Date) %>%summarise(Frequency=n())
pdf("../plots/SM-tweet_per_day.pdf")
g <- ggplot(data=plot_freq,aes(x=Date,y=Frequency))+
geom_line()+xlab("") +
ylab("Tweets per Day (#)") +
theme_classic()
plot(g)
dev.off()
pdf("../plots/SM-tweet_per_day.pdf")
g <- ggplot(data=plot_freq %>%year(Date)>=2014,aes(x=Date,y=Frequency))+
geom_line()+xlab("") +
ylab("Tweets per Day (#)") +
theme_classic()
g <- ggplot(data=plot_freq %>%filter(year(Date)>=2014),aes(x=Date,y=Frequency))+
geom_line()+xlab("") +
ylab("Tweets per Day (#)") +
theme_classic()
plot(g)
dev.off()
dat.plot <- sig.coords %>%filter(gsub("(.*): ","",respondent) !="Ind",
gsub("(.*): ","",impulse) == "returns",
gsub("(.*): ","",respondent) !=gsub("(.*): ","",impulse),
)%>%
arrange(IRF) %>%mutate(rank=1:n())
# Stock Returns
dat.plot <- dat.plot %>% ungroup()%>%
mutate(respondent=factor(rank,
labels=(dat.plot$respondent)
))
pdf("../plots/returns.pdf")
g<- ggplot(aes( IRF,
respondent),
data=dat.plot) +
geom_point(size=1,
color="blue") +
geom_errorbarh(aes(xmin = Lower,
xmax = Upper),
height = 1,
linetype="solid",
color="red") +
geom_vline(aes(xintercept=0), linetype="solid")+
ylab("Sentiment-Topic") +
xlab("IGO/NGO Response to Stock Market Returns") +
theme(axis.text = element_text(size = 1))+
theme_bw()
plot(g)
dev.off()
plot(g)
pdf("../plots/returns.pdf")
g<- ggplot(aes( IRF,
respondent),
data=dat.plot) +
geom_point(size=1,
color="red") +
geom_errorbarh(aes(xmin = Lower,
xmax = Upper),
height = 1,
linetype="solid",
color="red") +
geom_vline(aes(xintercept=0), linetype="solid")+
ylab("Sentiment-Topic") +
xlab("IGO/NGO Response to Stock Market Returns") +
theme(axis.text = element_text(size = 1))+
theme_bw()
plot(g)
dev.off()
plot(g)
dat.plot <- sig.coords %>%filter(gsub("(.*): ","",respondent) !="Ind",
gsub("(.*): ","",impulse) == "returns",
gsub("(.*): ","",respondent) !=gsub("(.*): ","",impulse),
)%>%
arrange(IRF) %>%mutate(rank=1:n())
dat.plot <- dat.plot %>% ungroup()%>%
mutate(respondent=factor(rank,
labels=(dat.plot$respondent)
))
pdf("../plots/fig 4n.pdf")
g<- ggplot(aes( IRF,
respondent),
data=dat.plot) +
geom_point(size=4,
color="blue") +
geom_errorbarh(aes(xmin = Lower,
xmax = Upper),
height = 0.2,
linetype="solid",
color="red") +
geom_vline(aes(xintercept=0), linetype="dodgerblue2")+
ylab("Sentiment-Topic") +
xlab("IGO/NGO Response to Stock Market Returns") +
theme(axis.text = element_text(size = 1))+
theme_bw()
plot(g)
dev.off()
plot(g)
pdf("../plots/fig 4n.pdf")
g<- ggplot(aes( IRF,
respondent),
data=dat.plot) +
geom_point(size=4,
color="blue") +
geom_errorbarh(aes(xmin = Lower,
xmax = Upper),
height = 0.2,
linetype="solid",
color="dodgerblue2") +
geom_vline(aes(xintercept=0), linetype="solid")+
ylab("Sentiment-Topic") +
xlab("IGO/NGO Response to Stock Market Returns") +
theme(axis.text = element_text(size = 1))+
theme_bw()
plot(g)
dev.off()
plot(g)
pdf("../plots/fig 4n.pdf")
g<- ggplot(aes( IRF,
respondent),
data=dat.plot) +
geom_point(size=4,
color="blue") +
geom_errorbarh(aes(xmin = Lower,
xmax = Upper),
height = 0.2,
linetype="solid",
color="dodgerblue2") +
geom_vline(aes(xintercept=0), linetype="solid")+
ylab("Sentiment-Topic") +
xlab("IGO/NGO Response to Stock Market Returns") +
theme(axis.text = element_text(size = 1))+
theme_bw()
plot(g)
dev.off()
Org_vec_wide
ret_rummary
ret_summary
table_data_list[[tt]]%>%ungroup()%>%
dplyr::select(starts_with("topic")) %>%
rename_at(vars(topicLabels$name),~topicLabels$label)%>%
summarise_each(funs(Mean = mean,
St.dev = sd,
Min = min,
Q25 = quantile(., 0.25),
Median = median,
Q75 = quantile(., 0.75),
Max = max
)) %>%
gather(stat, val) %>%
separate(stat, into = c("Topic", "Statistic"), sep = "_") %>%
spread(Statistic, val) %>%
mutate(Topic,
Mean=100*Mean,
St.dev=100*St.dev,
Min=Min*100,
Q25=Q25*100,
Median=Median*100,
Q75=Q75*100,
Max=Max*100)
topicLabels
table_data_list[[tt]]%>%ungroup()%>%
dplyr::select(starts_with("topic")) %>%
rename_at(vars(topicLabels$name),~topicLabels$label)
vars(topicLabels$name)
topicLabels$name
topicLabels
TopicTable
topicLabels$name <- names(data.frame(topNwords(results[[2]],N = 5)))
table_data_list[[tt]]%>%ungroup()%>%
dplyr::select(starts_with("topic")) %>%
rename_at(vars(topicLabels$name),~topicLabels$label)
for(tt in 1:length(table_data_list)){
print(xtable(table_data_list[[tt]]%>%ungroup()%>%
dplyr::select(starts_with("topic")) %>%
rename_at(vars(topicLabels$name),~topicLabels$label)%>%
summarise_each(funs(Mean = mean,
St.dev = sd,
Min = min,
Q25 = quantile(., 0.25),
Median = median,
Q75 = quantile(., 0.75),
Max = max
)) %>%
gather(stat, val) %>%
separate(stat, into = c("Topic", "Statistic"), sep = "_") %>%
spread(Statistic, val) %>%
mutate(Topic,
Mean=100*Mean,
St.dev=100*St.dev,
Min=Min*100,
Q25=Q25*100,
Median=Median*100,
Q75=Q75*100,
Max=Max*100),
caption = captions_tabs[tt],
label   = labels_tabs[tt],
align="lL|ccccccc"),
tabular.environment = "longtable",
caption.placement = "top",
floating = FALSE,
include.rownames = FALSE, # because addtorow will substitute the default row names
add.to.row = addtorow,     # this is where you actually make the substitution
hline.after=c(-1),
file=paste0("../tables/table_",file_tabs[tt],".tex")
)
}
